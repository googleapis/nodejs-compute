// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it, beforeEach, afterEach } from 'mocha';
import * as projectsModule from '../src';

import {PassThrough} from 'stream';

import {GoogleAuth, protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.ProjectsClient', () => {
  let googleAuth: GoogleAuth;
  beforeEach(() => {
    googleAuth = {
      getClient: sinon.stub().resolves({
        getRequestHeaders: sinon.stub().resolves({Authorization: 'Bearer SOME_TOKEN'}),
      })
    } as unknown as GoogleAuth;
  });
  afterEach(() => {
    sinon.restore();
  });
    it('has servicePath', () => {
        const servicePath = projectsModule.v1.ProjectsClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = projectsModule.v1.ProjectsClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = projectsModule.v1.ProjectsClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new projectsModule.v1.ProjectsClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new projectsModule.v1.ProjectsClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
        assert.strictEqual(client.projectsStub, undefined);
        await client.initialize();
        assert(client.projectsStub);
    });

    it('has close method', () => {
        const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('disableXpnHost', () => {
        it('invokes disableXpnHost without error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.DisableXpnHostProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Operation());
            client.innerApiCalls.disableXpnHost = stubSimpleCall(expectedResponse);
            const [response] = await client.disableXpnHost(request);
            assert.deepStrictEqual(response.latestResponse, expectedResponse);
            assert((client.innerApiCalls.disableXpnHost as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes disableXpnHost without error using callback', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.DisableXpnHostProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Operation());
            client.innerApiCalls.disableXpnHost = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.disableXpnHost(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.compute.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.disableXpnHost as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes disableXpnHost with error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.DisableXpnHostProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.disableXpnHost = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.disableXpnHost(request), expectedError);
            assert((client.innerApiCalls.disableXpnHost as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('disableXpnResource', () => {
        it('invokes disableXpnResource without error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.DisableXpnResourceProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Operation());
            client.innerApiCalls.disableXpnResource = stubSimpleCall(expectedResponse);
            const [response] = await client.disableXpnResource(request);
            assert.deepStrictEqual(response.latestResponse, expectedResponse);
            assert((client.innerApiCalls.disableXpnResource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes disableXpnResource without error using callback', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.DisableXpnResourceProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Operation());
            client.innerApiCalls.disableXpnResource = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.disableXpnResource(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.compute.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.disableXpnResource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes disableXpnResource with error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.DisableXpnResourceProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.disableXpnResource = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.disableXpnResource(request), expectedError);
            assert((client.innerApiCalls.disableXpnResource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('enableXpnHost', () => {
        it('invokes enableXpnHost without error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.EnableXpnHostProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Operation());
            client.innerApiCalls.enableXpnHost = stubSimpleCall(expectedResponse);
            const [response] = await client.enableXpnHost(request);
            assert.deepStrictEqual(response.latestResponse, expectedResponse);
            assert((client.innerApiCalls.enableXpnHost as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes enableXpnHost without error using callback', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.EnableXpnHostProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Operation());
            client.innerApiCalls.enableXpnHost = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.enableXpnHost(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.compute.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.enableXpnHost as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes enableXpnHost with error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.EnableXpnHostProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.enableXpnHost = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.enableXpnHost(request), expectedError);
            assert((client.innerApiCalls.enableXpnHost as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('enableXpnResource', () => {
        it('invokes enableXpnResource without error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.EnableXpnResourceProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Operation());
            client.innerApiCalls.enableXpnResource = stubSimpleCall(expectedResponse);
            const [response] = await client.enableXpnResource(request);
            assert.deepStrictEqual(response.latestResponse, expectedResponse);
            assert((client.innerApiCalls.enableXpnResource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes enableXpnResource without error using callback', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.EnableXpnResourceProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Operation());
            client.innerApiCalls.enableXpnResource = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.enableXpnResource(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.compute.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.enableXpnResource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes enableXpnResource with error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.EnableXpnResourceProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.enableXpnResource = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.enableXpnResource(request), expectedError);
            assert((client.innerApiCalls.enableXpnResource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('get', () => {
        it('invokes get without error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.GetProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Project());
            client.innerApiCalls.get = stubSimpleCall(expectedResponse);
            const [response] = await client.get(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.get as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes get without error using callback', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.GetProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Project());
            client.innerApiCalls.get = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.get(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.compute.v1.IProject|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.get as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes get with error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.GetProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.get = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.get(request), expectedError);
            assert((client.innerApiCalls.get as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getXpnHost', () => {
        it('invokes getXpnHost without error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.GetXpnHostProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Project());
            client.innerApiCalls.getXpnHost = stubSimpleCall(expectedResponse);
            const [response] = await client.getXpnHost(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getXpnHost as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getXpnHost without error using callback', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.GetXpnHostProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Project());
            client.innerApiCalls.getXpnHost = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getXpnHost(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.compute.v1.IProject|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getXpnHost as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getXpnHost with error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.GetXpnHostProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getXpnHost = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getXpnHost(request), expectedError);
            assert((client.innerApiCalls.getXpnHost as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('moveDisk', () => {
        it('invokes moveDisk without error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.MoveDiskProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Operation());
            client.innerApiCalls.moveDisk = stubSimpleCall(expectedResponse);
            const [response] = await client.moveDisk(request);
            assert.deepStrictEqual(response.latestResponse, expectedResponse);
            assert((client.innerApiCalls.moveDisk as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes moveDisk without error using callback', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.MoveDiskProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Operation());
            client.innerApiCalls.moveDisk = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.moveDisk(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.compute.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.moveDisk as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes moveDisk with error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.MoveDiskProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.moveDisk = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.moveDisk(request), expectedError);
            assert((client.innerApiCalls.moveDisk as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('moveInstance', () => {
        it('invokes moveInstance without error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.MoveInstanceProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Operation());
            client.innerApiCalls.moveInstance = stubSimpleCall(expectedResponse);
            const [response] = await client.moveInstance(request);
            assert.deepStrictEqual(response.latestResponse, expectedResponse);
            assert((client.innerApiCalls.moveInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes moveInstance without error using callback', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.MoveInstanceProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Operation());
            client.innerApiCalls.moveInstance = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.moveInstance(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.compute.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.moveInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes moveInstance with error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.MoveInstanceProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.moveInstance = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.moveInstance(request), expectedError);
            assert((client.innerApiCalls.moveInstance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setCommonInstanceMetadata', () => {
        it('invokes setCommonInstanceMetadata without error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.SetCommonInstanceMetadataProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Operation());
            client.innerApiCalls.setCommonInstanceMetadata = stubSimpleCall(expectedResponse);
            const [response] = await client.setCommonInstanceMetadata(request);
            assert.deepStrictEqual(response.latestResponse, expectedResponse);
            assert((client.innerApiCalls.setCommonInstanceMetadata as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setCommonInstanceMetadata without error using callback', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.SetCommonInstanceMetadataProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Operation());
            client.innerApiCalls.setCommonInstanceMetadata = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setCommonInstanceMetadata(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.compute.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setCommonInstanceMetadata as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setCommonInstanceMetadata with error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.SetCommonInstanceMetadataProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setCommonInstanceMetadata = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setCommonInstanceMetadata(request), expectedError);
            assert((client.innerApiCalls.setCommonInstanceMetadata as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setDefaultNetworkTier', () => {
        it('invokes setDefaultNetworkTier without error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.SetDefaultNetworkTierProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Operation());
            client.innerApiCalls.setDefaultNetworkTier = stubSimpleCall(expectedResponse);
            const [response] = await client.setDefaultNetworkTier(request);
            assert.deepStrictEqual(response.latestResponse, expectedResponse);
            assert((client.innerApiCalls.setDefaultNetworkTier as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setDefaultNetworkTier without error using callback', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.SetDefaultNetworkTierProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Operation());
            client.innerApiCalls.setDefaultNetworkTier = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setDefaultNetworkTier(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.compute.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setDefaultNetworkTier as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setDefaultNetworkTier with error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.SetDefaultNetworkTierProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setDefaultNetworkTier = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setDefaultNetworkTier(request), expectedError);
            assert((client.innerApiCalls.setDefaultNetworkTier as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setUsageExportBucket', () => {
        it('invokes setUsageExportBucket without error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.SetUsageExportBucketProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Operation());
            client.innerApiCalls.setUsageExportBucket = stubSimpleCall(expectedResponse);
            const [response] = await client.setUsageExportBucket(request);
            assert.deepStrictEqual(response.latestResponse, expectedResponse);
            assert((client.innerApiCalls.setUsageExportBucket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setUsageExportBucket without error using callback', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.SetUsageExportBucketProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.compute.v1.Operation());
            client.innerApiCalls.setUsageExportBucket = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setUsageExportBucket(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.compute.v1.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setUsageExportBucket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setUsageExportBucket with error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.SetUsageExportBucketProjectRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setUsageExportBucket = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setUsageExportBucket(request), expectedError);
            assert((client.innerApiCalls.setUsageExportBucket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getXpnResources', () => {
        it('invokes getXpnResources without error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.GetXpnResourcesProjectsRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.compute.v1.XpnResourceId()),
              generateSampleMessage(new protos.google.cloud.compute.v1.XpnResourceId()),
              generateSampleMessage(new protos.google.cloud.compute.v1.XpnResourceId()),
            ];
            client.innerApiCalls.getXpnResources = stubSimpleCall(expectedResponse);
            const [response] = await client.getXpnResources(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getXpnResources as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getXpnResources without error using callback', async () => {
            const client = new projectsModule.v1.ProjectsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.GetXpnResourcesProjectsRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.compute.v1.XpnResourceId()),
              generateSampleMessage(new protos.google.cloud.compute.v1.XpnResourceId()),
              generateSampleMessage(new protos.google.cloud.compute.v1.XpnResourceId()),
            ];
            client.innerApiCalls.getXpnResources = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getXpnResources(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.compute.v1.IXpnResourceId[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getXpnResources as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getXpnResources with error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.GetXpnResourcesProjectsRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getXpnResources = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getXpnResources(request), expectedError);
            assert((client.innerApiCalls.getXpnResources as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getXpnResourcesStream without error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.GetXpnResourcesProjectsRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.compute.v1.XpnResourceId()),
              generateSampleMessage(new protos.google.cloud.compute.v1.XpnResourceId()),
              generateSampleMessage(new protos.google.cloud.compute.v1.XpnResourceId()),
            ];
            client.descriptors.page.getXpnResources.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.getXpnResourcesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.compute.v1.XpnResourceId[] = [];
                stream.on('data', (response: protos.google.cloud.compute.v1.XpnResourceId) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.getXpnResources.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.getXpnResources, request));
            assert.strictEqual(
                (client.descriptors.page.getXpnResources.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes getXpnResourcesStream with error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.GetXpnResourcesProjectsRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedError = new Error('expected');
            client.descriptors.page.getXpnResources.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.getXpnResourcesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.compute.v1.XpnResourceId[] = [];
                stream.on('data', (response: protos.google.cloud.compute.v1.XpnResourceId) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.getXpnResources.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.getXpnResources, request));
            assert.strictEqual(
                (client.descriptors.page.getXpnResources.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with getXpnResources without error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.GetXpnResourcesProjectsRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.compute.v1.XpnResourceId()),
              generateSampleMessage(new protos.google.cloud.compute.v1.XpnResourceId()),
              generateSampleMessage(new protos.google.cloud.compute.v1.XpnResourceId()),
            ];
            client.descriptors.page.getXpnResources.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.compute.v1.IXpnResourceId[] = [];
            const iterable = client.getXpnResourcesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.getXpnResources.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.getXpnResources.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with getXpnResources with error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.GetXpnResourcesProjectsRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";const expectedError = new Error('expected');
            client.descriptors.page.getXpnResources.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.getXpnResourcesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.compute.v1.IXpnResourceId[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.getXpnResources.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.getXpnResources.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listXpnHosts', () => {
        it('invokes listXpnHosts without error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.ListXpnHostsProjectsRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.compute.v1.Project()),
              generateSampleMessage(new protos.google.cloud.compute.v1.Project()),
              generateSampleMessage(new protos.google.cloud.compute.v1.Project()),
            ];
            client.innerApiCalls.listXpnHosts = stubSimpleCall(expectedResponse);
            const [response] = await client.listXpnHosts(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listXpnHosts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listXpnHosts without error using callback', async () => {
            const client = new projectsModule.v1.ProjectsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.ListXpnHostsProjectsRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.compute.v1.Project()),
              generateSampleMessage(new protos.google.cloud.compute.v1.Project()),
              generateSampleMessage(new protos.google.cloud.compute.v1.Project()),
            ];
            client.innerApiCalls.listXpnHosts = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listXpnHosts(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.compute.v1.IProject[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listXpnHosts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listXpnHosts with error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.ListXpnHostsProjectsRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listXpnHosts = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listXpnHosts(request), expectedError);
            assert((client.innerApiCalls.listXpnHosts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listXpnHostsStream without error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.ListXpnHostsProjectsRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.compute.v1.Project()),
              generateSampleMessage(new protos.google.cloud.compute.v1.Project()),
              generateSampleMessage(new protos.google.cloud.compute.v1.Project()),
            ];
            client.descriptors.page.listXpnHosts.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listXpnHostsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.compute.v1.Project[] = [];
                stream.on('data', (response: protos.google.cloud.compute.v1.Project) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listXpnHosts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listXpnHosts, request));
            assert.strictEqual(
                (client.descriptors.page.listXpnHosts.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listXpnHostsStream with error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.ListXpnHostsProjectsRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedError = new Error('expected');
            client.descriptors.page.listXpnHosts.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listXpnHostsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.compute.v1.Project[] = [];
                stream.on('data', (response: protos.google.cloud.compute.v1.Project) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listXpnHosts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listXpnHosts, request));
            assert.strictEqual(
                (client.descriptors.page.listXpnHosts.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listXpnHosts without error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
              auth: googleAuth,
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.ListXpnHostsProjectsRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.compute.v1.Project()),
              generateSampleMessage(new protos.google.cloud.compute.v1.Project()),
              generateSampleMessage(new protos.google.cloud.compute.v1.Project()),
            ];
            client.descriptors.page.listXpnHosts.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.compute.v1.IProject[] = [];
            const iterable = client.listXpnHostsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listXpnHosts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listXpnHosts.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listXpnHosts with error', async () => {
            const client = new projectsModule.v1.ProjectsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.compute.v1.ListXpnHostsProjectsRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";const expectedError = new Error('expected');
            client.descriptors.page.listXpnHosts.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listXpnHostsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.compute.v1.IProject[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listXpnHosts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listXpnHosts.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });
});
